// Module dependencies.
var inits = require('inits');
var debug = require('debug')('streaming_webapp:server');
var http = require('http');
var config = require('../config');
var logger = require('../resources/loggingManager');
require('../resources/resourceManager');
var socketManager = require('../resources/socketManager');

process.on('uncaughtException', function (err) {
	var error = {};
	error.header = "Uncaught Exception";
	error.body = err;
	logger.errorLog(error);
});

logger.infoLog('Node Version:' + process.version);

/**
 * Start Routine: Called once initialisation has completed
 */
inits.start(function(callback) {
	
	// Get port from environment and store in Express.
	var port = normalizePort(process.env.PORT || '3000');
	
	// Create HTTP server.
	//var server = http.createServer(function(request, response) {});

	// Listen on provided port, on all network interfaces.
	//server.listen(port);
	//server.on('error', onError);
	//server.on('listening', function() {
	//	onListening();
	//	callback(null);
	//});
	
	//Create websocket on the HTTP Server
	const WebSocket = require('ws');

	const wss = new WebSocket.Server({ port: port });
	//var io = require('socket.io');
	//var serverSocket = io.listen(server);
	socketManager.init(wss);
	wss.on('connection', socketManager.handleConnection);
	
	/**
	 * Normalize a port into a number, string, or false.
	 * @param val
	 */
	function normalizePort(val) {
	  var port = parseInt(val, 10);

	  if (isNaN(port)) {
	    // named pipe
	    return val;
	  }

	  if (port >= 0) {
	    // port number
	    return port;
	  }

	  return false;
	}

	/**
	 * Event listener for HTTP server "error" event.
	 * @param error
	 */
	function onError(error) {
	  if (error.syscall !== 'listen') {
	    callback(error);
		throw error;
	  }

	  var bind = typeof port === 'string'
	    ? 'Pipe ' + port
	    : 'Port ' + port;

	  // Handle specific listen errors with friendly messages
	  switch (error.code) {
	    case 'EACCES':
	      logger.errorLog(bind + ' requires elevated privileges');
	      process.exit(1);
	      break;
	    case 'EADDRINUSE':
	      logger.errorLog(bind + ' is already in use');
	      process.exit(1);
	      break;
	    default:
	      throw error;
	  }
	}

	/**
	 * Event listener for HTTP server "listening" event.
	 */
	function onListening() {
	  var addr = server.address();
	  var bind = typeof addr === 'string'
	    ? 'pipe ' + addr
	    : 'port ' + addr.port;
	  debug('Listening on ' + bind);
	  logger.infoLog("Velon-race API listening" + bind);
	}
});


